import org.jetbrains.exposed.sql.Database
import org.jetbrains.exposed.sql.SchemaUtils
import org.jetbrains.exposed.sql.Table
import org.jetbrains.exposed.sql.transactions.TransactionManager
import org.jetbrains.exposed.sql.transactions.transaction
import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.TestInstance
import kotlin.random.Random

/**
 * A test helper that creates an in-memory database for the lifetime of the test.
 *
 * @property databaseName The name of the temporary database. Randomly generated by default.
 * @property tables An array of tables to initialize. Will be dropped and created before each individual test.
 */
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
abstract class DatabaseTest(
    private val databaseName: String = "test_db_${Random.nextInt(0, 9999)}",
    private val tables: Array<Table> = emptyArray(),
) {

    @Suppress("MemberVisibilityCanBePrivate")
    protected val database = Database.connect("jdbc:h2:mem:$databaseName;DB_CLOSE_DELAY=-1;IGNORECASE=true;")

    @BeforeEach
    private fun databaseSetUp() {
        transaction(database) {
            SchemaUtils.drop(*tables)
            SchemaUtils.create(*tables)
        }
    }

    @AfterAll
    private fun databaseTearDown() = TransactionManager.closeAndUnregister(database)

}